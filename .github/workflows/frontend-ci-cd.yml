name: Frontend CI/CD

on:
  push:
    branches:
      - main
      - feature
  pull_request:
    branches:
      - main
      - staging

jobs:
  # Build frontend
  build-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build application
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  # Test frontend
  test-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run tests with coverage
      run: |
        cd frontend
        npm test

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

  dockerize-and-push:
      needs: test-frontend
      runs-on: ubuntu-latest
  
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
  
      - name: Build and Tag Docker image
        id: build-image
        run: |
          # Determine the tag based on the branch
          if [[ "${GITHUB_REF}" == refs/heads/feature ]]; then
            TAG="development"
          elif [[ "${GITHUB_REF}" == refs/heads/staging ]]; then
            TAG="staging"
          else
            echo "Unsupported branch for this workflow."
            exit 1
          fi
  
          # Build and tag the Docker image
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:$TAG -f frontend/Dockerfile ./frontend
          docker tag ${{ secrets.DOCKER_USERNAME }}/frontend:$TAG ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}
  
          # Set outputs for later steps
          echo "::set-output name=tag::$TAG"
  
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ steps.build-image.outputs.tag }}
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

  # Deploy to Firebase Hosting
  deploy-to-firebase:
    needs: test-frontend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

    - name: Setup Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy to Firebase Hosting
      run: |
        cd frontend
        firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }}

  # Uvedba na GitHub Pages
  deploy-pages:
    needs: test-frontend
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs